/* General App Styling */
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f0f2f5;
  color: #333;
  line-height: 1.6;
}

.app-container {
  max-width: 1000px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.app-header {
  text-align: center;
  margin-bottom: 30px;
  padding-bottom: 20px;
  border-bottom: 1px solid #e0e0e0;
}

.app-header h1 {
  color: #1a73e8; /* Google Blue */
  font-size: 2.5em;
  font-weight: 600;
  letter-spacing: -0.5px;
}

/* Input Area */
.input-area {
  display: flex;
  gap: 15px;
  margin-bottom: 30px;
  align-items: stretch; /* Make items same height */
}

#topicInput {
  flex-grow: 1;
  padding: 12px 15px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 1em;
  resize: vertical; /* Allow vertical resize */
  min-height: 50px; /* Minimum height for textarea */
  box-sizing: border-box;
}

#generateButton {
  padding: 0 25px; /* Adjusted padding */
  background-color: #1a73e8; /* Google Blue */
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 1em;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px; /* Space between icon and text */
  min-height: 50px; /* Match textarea height */
  box-sizing: border-box;
}

#generateButton:hover {
  background-color: #1558b0; /* Darker blue */
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

#generateButton:disabled {
  background-color: #a0c2ed;
  cursor: not-allowed;
}

#generateButton svg {
  width: 20px;
  height: 20px;
  fill: currentColor;
}

/* Loading and Error States */
.loading-spinner, .error-message {
  text-align: center;
  padding: 20px;
  margin: 20px 0;
  border-radius: 6px;
}

.loading-spinner {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  font-size: 1.1em;
  color: #555;
}

.loading-icon {
  width: 24px;
  height: 24px;
  animation: spin 1s linear infinite;
}

.loading-spinner.small .loading-icon {
  width: 18px;
  height: 18px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.spinner_ajPY { /* From the SVG */
  transform-origin: center;
  animation: spinner_AtaB .75s infinite linear;
}
@keyframes spinner_AtaB {
  100% { transform: rotate(360deg); }
}

.error-message {
  background-color: #ffebee; /* Light red */
  color: #c62828; /* Dark red */
  border: 1px solid #ef9a9a;
}
.error-message.small {
  padding: 5px 10px;
  font-size: 0.8em;
  margin: 5px 0 0 0; /* Adjusted margin for small error messages */
}


/* Flashcards Container */
.flashcards-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 20px;
  perspective: 1000px; /* For 3D flip effect */
}

.flashcard {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 1px 4px rgba(0,0,0,0.08);
  cursor: pointer;
  transition: transform 0.6s, box-shadow 0.3s;
  transform-style: preserve-3d; /* Important for flip */
  min-height: 200px; /* Ensure cards have a minimum height */
  display: flex; /* To help with content centering if needed */
  flex-direction: column; /* Stack content vertically */
}

.flashcard:hover {
  box-shadow: 0 4px 12px rgba(0,0,0,0.12);
}

.flashcard.flipped {
  transform: rotateY(180deg);
}

.flashcard-inner {
  position: relative;
  width: 100%;
  height: 100%;
  text-align: center;
  transition: transform 0.6s;
  transform-style: preserve-3d;
  display: flex; /* Ensure inner takes full height */
  flex-direction: column;
}


.flashcard-front, .flashcard-back {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden; /* Hide the back side during flip */
  -webkit-backface-visibility: hidden; /* Safari */
  display: flex;
  flex-direction: column;
  justify-content: center; /* Center content vertically */
  align-items: center; /* Center content horizontally */
  padding: 20px;
  box-sizing: border-box;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
}

.flashcard-front {
  background-color: #f8f9fa; /* Light grey for front */
  color: #3c4043; /* Dark grey text */
}

.flashcard-back {
  background-color: #e8f0fe; /* Light blue for back */
  color: #174ea6; /* Darker blue text */
  transform: rotateY(180deg); /* Initial state for back */
  justify-content: space-between; /* Space out definition and image button */
}

.flashcard .term {
  font-size: 1.4em;
  font-weight: 500;
}

.flashcard .definition {
  font-size: 1em;
  text-align: left;
  align-self: flex-start; /* Align definition to the top */
  width: 100%;
  margin-bottom: 10px; /* Space before image/button */
  flex-grow: 1; /* Allow definition to take available space */
}

/* Image specific styling */
.flashcard-image-container {
  width: 100%;
  margin-top: 10px; /* Space above the image */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center; /* Center loading/error/image */
  min-height: 100px; /* Ensure space for image or button */
}

.flashcard-image {
  max-width: 100%;
  max-height: 150px; /* Control image size */
  border-radius: 4px;
  object-fit: cover;
  margin-bottom: 10px; /* Space below image if button is also there */
}

.flashcard-back.image-layout-active .definition {
  /* Adjust definition styles if an image is present or loading */
  /* For example, you might want to limit its height or change layout */
}


.generate-image-button {
  background-color: #4285f4; /* Google Blue */
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.9em;
  transition: background-color 0.2s;
  display: flex;
  align-items: center;
  gap: 6px;
  align-self: center; /* Center button if definition is short */
}

.generate-image-button:hover {
  background-color: #3367d6; /* Darker blue */
}

.generate-image-button:disabled {
  background-color: #a0c2ed;
  cursor: not-allowed;
}

.generate-image-button svg {
  width: 16px;
  height: 16px;
  fill: currentColor;
}


/* Responsive Adjustments */
@media (max-width: 768px) {
  .app-container {
    margin: 10px;
    padding: 15px;
  }
  .app-header h1 {
    font-size: 2em;
  }
  .input-area {
    flex-direction: column;
  }
  #topicInput, #generateButton {
    width: 100%; /* Full width on small screens */
    min-height: 45px; /* Slightly smaller min-height */
  }
  .flashcards-container {
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Slightly smaller cards */
    gap: 15px;
  }
  .flashcard {
    min-height: 180px;
  }
  .flashcard .term {
    font-size: 1.2em;
  }
  .flashcard .definition {
    font-size: 0.95em;
  }
}

@media (max-width: 480px) {
  .app-header h1 {
    font-size: 1.8em;
  }
  .flashcards-container {
    grid-template-columns: 1fr; /* Single column */
  }
  .flashcard-front, .flashcard-back {
    padding: 15px;
  }
}

/* Ensure API Key placeholder is not too prominent if accidentally rendered */
/* (Though it shouldn't be with proper JS logic) */
[data-api-key-placeholder]::before {
  content: "API Key Not Set";
  color: red;
  font-weight: bold;
  display: block;
  text-align: center;
  padding: 10px;
  background-color: #fff0f0;
  border: 1px solid red;
  margin-bottom: 10px;
}

/* Styling for the API key input if it were part of the HTML (it's not in this version) */
/* #apiKeyInput { ... } */

/* Add a bit more spacing below the generate image button if an image is present */
.flashcard-image + .generate-image-button {
    margin-top: 10px;
}

/* When image is loading, ensure button is hidden or handled */
.flashcard-image-container .loading-spinner + .generate-image-button {
    display: none; /* Example: hide button during image load */
}

/* If there's an error message for the image, hide the generate button */
.flashcard-image-container .error-message + .generate-image-button {
    display: none;
}

/* If an image is successfully loaded, hide the generate button */
.flashcard-image-container img ~ .generate-image-button {
    display: none;
}

/* Styles for the definition when an image is present to ensure it doesn't overlap excessively */
.flashcard-back.image-layout-active .definition {
    max-height: 80px; /* Or some other value, adjust as needed */
    overflow-y: auto; /* Add scroll if definition is too long */
    margin-bottom: 5px; /* Reduce margin if image is taking space */
}

/* Ensure the image container itself has a reasonable max height if definition is very short */
.flashcard-back.image-layout-active .flashcard-image-container {
    max-height: 180px; /* Adjust based on card size and content */
}

/* Adjustments for the loading spinner within the image container */
.flashcard-image-container .loading-spinner.small {
    font-size: 0.9em;
    padding: 10px;
}
.flashcard-image-container .loading-spinner.small .loading-icon {
    width: 20px;
    height: 20px;
}

/* Ensure button is visible if no image, no loading, no error */
/* This is tricky with pure CSS, JS handles the conditional rendering of the button */
/* The default state is the button is visible, JS will hide it or show alternatives */
/* So, no specific CSS rule needed here to "show" it if it's already visible by default */
/* The `!card.imageUrl && !card.imageLoading && !card.imageError` in JS handles this */
